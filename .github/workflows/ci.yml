name: CI Pipeline

# Define events that trigger this workflow
on:
  pull_request:  # Trigger the workflow for pull requests targeting the main branch
    branches:
      - main
  push:  # Trigger the workflow for pushes to the main branch
    branches:
      - main

jobs:
  # First job to set up the environment and install dependencies
  setup:
    runs-on: ubuntu-latest  # Use the latest Ubuntu image for the runner
    steps:
      # Step 1: Check out the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Python with the required version
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'  # Specify Python version

      # Step 3: Cache the virtual environment directory to reuse across jobs
      - name: Cache Virtual Environment
        uses: actions/cache@v3
        with:
          path: venv  # Path to the virtual environment
          key: ${{ runner.os }}-venv-${{ hashFiles('requirements*.txt') }}  # Unique cache key based on OS and dependencies
          restore-keys: |
            ${{ runner.os }}-venv-  # Fallback to other caches with the same OS

      # Step 4: Create and install dependencies in a virtual environment
      - name: Install Dependencies
        run: |
          python -m venv venv  # Create a virtual environment
          source venv/bin/activate  # Activate the virtual environment
          pip install --upgrade pip  # Upgrade pip to the latest version
          pip install -r requirements-dev.txt  # Install all development dependencies

      # Step 5: Save the virtual environment as an artifact to share between jobs
      - name: Save Virtual Environment
        uses: actions/upload-artifact@v3
        with:
          name: venv  # Artifact name
          path: venv  # Path to the virtual environment

  # Second job for linting the code with Black
  lint:
    runs-on: ubuntu-latest
    needs: setup  # Depend on the setup job
    steps:
      # Step 1: Check out the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Download the virtual environment artifact
      - name: Download Virtual Environment
        uses: actions/download-artifact@v3
        with:
          name: venv  # Name of the artifact to download

      # Step 3: Run Black to check code formatting
      - name: Run Black
        run: |
          source venv/bin/activate  # Activate the downloaded virtual environment
          black --check .  # Check code formatting without modifying files

  # Third job for running security scans
  security-scans:
    runs-on: ubuntu-latest
    needs: setup  # Depend on the setup job
    steps:
      # Step 1: Check out the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Download the virtual environment artifact
      - name: Download Virtual Environment
        uses: actions/download-artifact@v3
        with:
          name: venv  # Name of the artifact to download

      # Step 3: Run security scans with Safety and Bandit
      - name: Security Scan
        run: |
          source venv/bin/activate  # Activate the downloaded virtual environment
          safety check --full-report  # Check for dependency vulnerabilities
          bandit -r .  # Scan source code for security issues

  # Fourth job for running tests with coverage
  tests:
    runs-on: ubuntu-latest
    needs: setup  # Depend on the setup job
    steps:
      # Step 1: Check out the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Download the virtual environment artifact
      - name: Download Virtual Environment
        uses: actions/download-artifact@v3
        with:
          name: venv  # Name of the artifact to download

      # Step 3: Run tests and generate a coverage report
      - name: Run Tests
        run: |
          source venv/bin/activate  # Activate the downloaded virtual environment
          pytest --cov=. --cov-report=xml  # Run tests with coverage reporting
